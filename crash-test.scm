(begin
  (define (spinning-loop n)
    (if (zero? n) #t
        (spinning-loop (- n 1))))
  (define (throwway-fill-heap n)
    (cond
      ((zero? n) #t)
      (else (make-vector 80000 0)
            (throwway-fill-heap (- n 1)))))
  (define (alternate-fill-heap-2 n keep? acc)
    (cond
      ((zero? n) acc)
      (keep? (alternate-fill-heap-2 (- n 1) #f (cons (cons 1 2) acc)))
      (else (alternate-fill-heap-2 (- n 1) #t acc))))
  (define (alternate-fill-heap n keep? acc)
    (cond
      ((zero? n) acc)
      (keep? (alternate-fill-heap (- n 1) #f (cons (cons 1 2) acc)))
      (else (alternate-fill-heap (- n 1) #t acc))))
  (define (stage-1)
    (write-string "crash test\n")
    (write-string "----------\n")
    (write-string "1. running VM for few million cycles for debugging:\n")
    (write-string "    - started \n")
    (spinning-loop 2360009)
    (write-string "    - done    \n"))
  (define (triggering-list n acc)
    (if (zero? n) acc
        (triggering-list (- n 1) (cons n acc))))
  (define (stage-2)
    (write-string "2. filling stack to 2000 slots, adding launcher ")
    (write-string "and filling heap:\n")
    (write-string "    - started \n")
    (let* ((iter1       0)
           (iter1       95456)
           (stored      (alternate-fill-heap iter1 #f '()))
           (launcher    (triggering-list 2000 '())))
      (stage-2b stored launcher)))
  (define (filling-stack n stored launcher)
    (if (zero? n)
        (begin
          (write-string "    - done    \n")
          (let ((val (stage-3)))
            (cons stored launcher)))
        (let ((val (filling-stack (- n 1) stored launcher)))
          val)))
  (define (stage-2b stored launcher)
    (filling-stack 1000 stored launcher))
  (define (fill-stack-2 n)
    (if (zero? n)
        (begin
          (dbg-message 1 #xabba #xdeed #xc0de)
          (stage-3c))
        (let ((val (fill-stack-2 (- n 1))))
          val)))
  (define (dbg-message msg x y z) #f)
  (define (stage-3c)
    (let ((store1 (cons 1 2))
          (object (cons #xabba 
                        (cons #xdabba 
                              (cons #xc0de 
                                    (cons #xdeed 
                                          (cons #x42 '()))))))
          (store2 (cons 3 4))
          (store3 (cons 5 6))
          (store4 (cons 7 8))
          (store5 (cons 9 10)))
      (cons store1 (cons store2 (cons store3 (cons store4 store5))))))
  (define (stage-3b)
    (let ((stored (fill-stack-2 4)))
      (dbg-message 0 #xabba #xdeed #xc0de)
      stored))
  (define (stage-3)
    (write-string "3. pushing a triggering object to stack:\n")
    (write-string "    - started \n")
    (let ((stored (stage-3b)))
      (write-string "    - done    \n")
      (stage-4 stored)))
  (define (stage-4 store)
    (write-string "4. triggering one GC and releasing stack :\n")
    (write-string "    - started \n")
    (dbg-message 10 #xabba #xdeed #xc0de)
    (dbg-message 5 #xabba #xdeed #xc0de)
    (let ((iter 20670))
      (alternate-fill-heap iter #f '())
      (dbg-message 5 #xabba #xdeed #xc0de)
      (alternate-fill-heap 0 #f '()))
    (write-string "    - done    \n"))
  (define (stage-5)
    (write-string "5. prefilling heap: \n")
    (write-string "    - started \n")
      (alternate-fill-heap     1000 #f '())
      (dbg-message 0 #xabba #xdeed #xc0de)
      (throwway-fill-heap    13)
      (make-vector  8500 0)
      (make-vector  6000 0)
      (make-vector  5000 0)
      (make-vector  5000 0)
      (make-vector  3000 0)
      (make-vector  3000 0)
      (make-vector  3000 0)
      (make-vector  3000 0)
      (make-vector  3000 0)
      (make-vector  3000 0)
    (write-string "    - done    \n"))
  (define (stage-7 x)
    (dbg-message 0 #xabba #xdeed #xc0de)
    (write-string "7. this is seen only with bug fixed\n")
    (write-string " - the sum of the launcher list  ")
    (display x)
    (newline)
    (write-string " - done\n"))
  (define (fill-stack-3 n stored+launcher)
    (if (zero? n)
        (begin
        (dbg-message 0 #xabba #xdeed #xc0de)
        (stage-6 stored+launcher))
        (let ((val (fill-stack-3 (- n 1) stored+launcher)))
          val)))
  (define (stage-6 stored+launcher)
    (write-string "6. triggering the bug: \n")
    (let ((launcher (cdr stored+launcher)))
      (dbg-message 4 #xabba #xdeed #xc0de)
      (stage-7 (apply + (cdr (cdr (cdr (cdr (cdr launcher)))))))))
  ;
  (stage-1)
  (let ((stored+launcher (stage-2)))
    (stage-5)
    (fill-stack-3 839 stored+launcher)
    #t))
